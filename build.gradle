plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'war'
	id 'groovy'
	id 'jacoco'
	id 'checkstyle'
	id 'maven-publish'
	id 'org.sonarqube' version '3.4.0.2513'
}

group = 'com.example'
version = '0.7.2'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url = uri("http://localhost:8081/repository/maven-private")
		credentials {
			username = nexusUsername
			password = nexusPassword
		}
		allowInsecureProtocol = true
	}
}

apply from: "$rootDir/integration-test.gradle"

dependencies {
	implementation 'com.example:model:1.1-SNAPSHOT'
	implementation 'org.springframework.data:spring-data-jpa:2.7.5'
	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	runtimeOnly("mysql:mysql-connector-java:")

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	compileOnly 'org.mapstruct:mapstruct:1.5.3.Final'
	testImplementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	integrationTestImplementation 'org.testcontainers:junit-jupiter:1.17.6'
	integrationTestImplementation 'org.testcontainers:mysql:1.17.6'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
	testImplementation 'org.spockframework:spock-spring:2.3-groovy-3.0'
	testImplementation 'org.codehaus.groovy:groovy-all:3.0.13'
	testImplementation 'net.bytebuddy:byte-buddy:1.12.19'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn(test)
	dependsOn(integrationTest)
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
	reports {
		xml.enabled true
	}
}

checkstyleMain {
	source = fileTree('.') {
		excludes = ['.*/**', 'gradle*', 'build/**', '*.iml', '*.log', '**/*.jar', 'data/**']
	}
}

war {
	baseName = "api"
	version = ""
}

publishing {
	publications {
		mavenWeb(MavenPublication) {
			from components.web
		}
	}
	repositories {
		maven {
			url = "http://localhost:8081/repository/maven-releases"
			credentials {
				username = nexusUsername
				password = nexusPassword
			}
			allowInsecureProtocol = true
		}
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "pis22z_api_AYRoUOdphCb-_oA5D4A0"
		property "sonar.qualitygate.wait", true
	}
}
